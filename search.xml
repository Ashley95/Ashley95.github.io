<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单的装饰器代码]]></title>
    <url>%2F2018%2F08%2F20%2F%E5%86%99%E7%82%B9%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%2F</url>
    <content type="text"><![CDATA[装饰器: 允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。 一个计算函数运行时间的装饰器: 12345678import datetimedef cal_time(func): def cal_func(*args, **kargs): start = datetime.datetime.now() result = func(*args, **kargs) end = datetime.datetime.now() print('cost_time:', (end - start).microseconds) return cal_func 1234@cal_timedef add(a, b)add(1, 2) 在访问网页时判断用户是否登陆: 1234567891011121314151617from django.http import HttpResponseRedirectfrom django.core.urlresolvers import reversefrom user.models import Usersdef is_login(func): def check_login(request): # 如果登陆,返回函数func ticket = request.COOKIES.get('ticket') if not ticket: # 没有登陆,跳转到登陆页面 return HttpResponseRedirect(reverse('user:login')) user = Users.objects.filter(ticket=ticket) if not user: return HttpResponseRedirect(reverse('user:login')) return func(request) return check_login 这里是使用的ticket来模拟session id,没有使用Django自带的request.session,通过判断请求中的seesion id是否存在以及与session是否一致来判断用户是否登陆,可以放在需要登陆才能访问的视图函数之前. 在Django中实现判断用户是否登陆还可以中间件来实现,方法多样.]]></content>
      <categories>
        <category>装饰器</category>
      </categories>
      <tags>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django与Flask的区别]]></title>
    <url>%2F2018%2F08%2F20%2FFlask%E4%B8%8EDjango%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[此篇文章总结了Django与Flask的区别 Django:我个人更喜欢使用Django,因为我能想到的,它基本都帮我完成了,它会告诉我需要在哪个文件中写什么,也会明确的告诉我在哪里出现了错误. Django体系庞大,自带功能完善的ORM和模板引擎,在灵活上和自由度上不够高,把我们的行动范围限制在了它准备好的框架中 使用Django开发小应用有一种使用Scapy去爬取小网站的感觉,大材小用. Django与SQL耦合度过高,与NoSQL的搭配并不好. Django适合企业级的网站开发:快速,安全,稳定 Django比Flask更成熟,完善,但是生态相对封闭 Django的官网比Flask好看太多. 这些只是Django优点的一部分,百度上还有很多. Flask第一次使用Flask时,我真的不知所措,我不知道在哪里需要干什么,文件到底放在哪里,代码应该放在哪个py文件中,我觉得大牛应该更喜欢Flask,因为它提供了一个自由发挥的场地,大牛们可以随意发挥不受拘束. Flask没有Django那么重,更为自由,灵活 很适合小型应用,开发大型应用时,需要开发者有较强的能力和经验 在性能方面都会比Django要好 与关系型数据库的匹配不弱于Django,但在NoSQL方面的匹配要强于Django]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的主从配置]]></title>
    <url>%2F2018%2F08%2F20%2FMySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[MySQL的主从配置比redis的主从相比要轻松的多,可能我参与的比较少吧,但是基本的主从配置还是没有问题的. 主配置主从主要实现的是读写分离,这样做法的优势有很多,我所理解的一个是缓解服务器的读写压力. 在Ubuntu下,配置文件为my.cnf,位置为/etc/mysql/my.cnf 在windows下,配置文件为my.ini vim my.cnf # 进入配置文件进行设定 server-id=200 # 设置主服务器的ID,主和从的id号不能相同 innodb_flush_log_at_trx_commit=2 # 防止断电数据丢失 sync_binlog=1 # 开启binlog日志同步功能 log-bin=mysql-bin-200 # binlog日志文件名 binlog-do-db=xxx # 这个表示同步哪个库,不写的话表示同步所有的库 主配置完成后,重启主库service mysql restart mysql -uroot -p # 登陆 grant replication slave on . to ‘‘mark‘@’192.168.1.201’ identified by ‘123456’; # 授权给从数据库服务器192.168.1.201, 用户名mark, 密码123456 show master status; # 查看主库的状态 从配置vim my.cnf server-id = 201 # 不能和主ID一样 innodb_fiush_log_at_trx_commit=2 sync_binlog=1 log-bin=mysql-bin-201 从配置完成后,重启重库service mysql restart mysql -uroot -p change master to master_host=’192.168.1.200’, master_user=’mark’,master_password=’123456’,master_log_file = ‘mysql-bin-200.000002’,master_log_pos=1167; # 这里是建立与主服务器的连接,master_log_pos需要查看主数据库中position的数值 start slave; # 开启从库 show slave status; # 查看从数据库状态 验证主从主从中的数据库需要相同,主数据库在进行改动时,从数据库是可以查看的,主数据库负责写,从数据库负责读,分摊数据库压力.]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>主从配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对内置装饰器的理解]]></title>
    <url>%2F2018%2F08%2F20%2F%E5%AF%B9%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[装饰器就是用函数来包装函数,对内函数赋予一些我们所需要的功能,Python有三个内置的装饰器:staticmethod,classmethod和property,这三个装饰器都是和类相关的. @staticmethond一般情况,要使用类的方法,需要先实例化一个对象再调用方法,使用staticmethod(静态方法)之后,可以直接使用类来进行方法的访问,不需要事先进行实例化,这样做的好处就是可以将属于这个类的函数放到静态方法中 123456789101112131415161718class test(object): class_arr = 1 # 对象方法 def A(self): print('A') # 静态方法 @staticmethod def B(): print('B')# 实例化对象foo = test()foo.A()foo.B()test.B()test.A() 1234567ABBTraceback (most recent call last): File "C:\Users\29427\Desktop\reivew.py", line 36, in &lt;module&gt; test.A()TypeError: A() missing 1 required positional argument: 'self' 可以看出,使用静态方法装饰的方法,类可以直接访问,而没有被装饰的方法,类是无法访问的,并且装饰的方法是不用传入self的 @classmethod类方法和静态方法很相似,区别在于静态方法装饰的方法是不需要传入self的,而类方法装饰的方法是需要传入一个隐式的对象作为参数,这个隐式的对象在有继承时表示相应的子类,在无继承时表示当前类 12345678910111213141516171819202122232425262728293031323334class Parent(object): @staticmethod def staticSayHello(): print ("Parent static") @classmethod def classSayHello(cls): if cls == Boy: print ("Boy classSayHello") elif cls == Girl: print ("girl sayHello")class Boy(Parent): pass class Girl(Parent): passBoy.classSayHello()Girl.classSayHello() 12Boy classSayHellogirl sayHello 可以看出这个隐式的类参数可以进行类的区分 @property该装饰器可以将方法变成属性,在进行访问时就不能像访问方法那样进行访问,要用访问属性的方式进行访问 123456789101112131415161718class Student(object): @property def score(self): return self._score @score.setter def score(self,value): if not isinstance(value, int): raise ValueError('分数必须是整数才行呐') if value &lt; 0 or value &gt; 100: raise ValueError('分数必须0-100之间') self._score = values = Student()s.score = 60 s.set_score(60)s.score s.get_score() 使用property来装饰score时会自动创建一个新的setter装饰器,使用setter可以对属性进行赋值,这样做的话,对一个属性的查询和修改就会简单很多.]]></content>
      <categories>
        <category>装饰器</category>
      </categories>
      <tags>
        <tag>装饰器</tag>
        <tag>staticmethod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL性能优化]]></title>
    <url>%2F2018%2F08%2F20%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[此篇文章简单介绍MySQL配置优化 修改back_logback_log值表示MySQL的连接数据达到max_connections时,有多少请求能够被放在堆栈之中以等待其他连接释放.如果等待连接的数量超过back_log时,就不被授予连接资源. show variables like ‘back_log’:查看当前数量 网上说默认值是50, 但是我查出来是80,反正如果要根据当前需求来改变数量,可以在my.ini中将back_log的值修改为500,理论上可以无限增大的,但是会收到系统网卡等的限制. 修改wait_timeoutwait_timeout值表示服务器关闭非交互连接之前等待活动的秒数,而interactive_timeout表示的交互式连接等待的秒数,当网站有大量的MySQL连接请求时,设置这个wait_timeout值就非常重要,可以将超时的连接关闭,避免资源的损失. 将wait_timeout从8小时修改为30分钟,wait_timeout=1800 修改max_connectionsmax_connections指MySQL的最大连接数,在并发连接较大时可以适当增大这个连接数,但是增大连接就意味着更多的内存开销,只能在适当的范围内调节. MySQL服务器允许的最大连接数16384 show variables like ‘max_connections’查看当前连接数 可以将默认的max_connections值151,修改为3000 修改max_user_connectionsmax_user_connections指同一个账号能够同时连接MySQL服务的最大连接数. 默认值为0表示不受限制,根据实际需求进行调节. 要与Max_used_connections的区分开来,后者是表示过去的某段时间最大的连接数. show variables like ‘max_user_connections’查看当前值 修改thread_concurrencythread_concurrency指表示开启的线程数,一般根据服务器的CPU核数进行设定,线程数等于CPU x 2 show variables like ‘thread_concurrency’查看默认值]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库概念]]></title>
    <url>%2F2018%2F08%2F15%2Fmysql%2F</url>
    <content type="text"><![CDATA[SQL是Structured Query Language(结构化查询语言)的缩写。SQL是专为数据库而建立的操作命令集,是一种功能齐全的数据库语言。 数据库概念 为什么要使用数据库? 123数据持久化 - 将数据从一掉电数据就丢失的存储介质(内存)转移到持久存储介质(硬盘)普通文件 / 二进制文件 / Excel / 数据库数据库 - 高效的存储和管理数据方便的检索数据 什么事关系型数据库? 1234567理论基础 - 集合论和关系代数用二维表组织数据表 - 实体行 - 记录列 - 字段表与表之间有关系编程语言 - SQL - 结构化查询语言 数据库、数据库系统、数据库管理系统？ 1234567891011121314Database - DB - 数据的仓库(集散地)DBS - 包括了DB、DBMS、DBA（数据库管理员）（R）DBMS - （关系型）数据库管理系统 - 管理数据库的软件 - MySQL - 小巧但是强大 - Oracle - 安全强大 商业智能 昂贵 - SQL Server - SQLite - 嵌入式数据库（移动端）yum install mariadb-server mariadbrpm -ivh mysql-server.rpmrpm -ivh mysql-client.rpmservices.msc --&gt; MySQLnet start mysqlnet stop mysql 什么是SQL? 123456Structured Query Language结构化查询语言DDL(数据定义语言): creat / drop / alterDML(数据操纵语言): insert / delete / updateDQL(数据查询语言): selectDCL(数据控制语言): grant / revoke / begin / commit / rollback 关系型数据库中数据完整性指的是什么? 1231. 实体完整性: 每条记录都是独一无二的2. 参照完整性: 表中的数据要参照其他表已有的数据(外键)3. 域完整性: 数据是有效的(数据类型/非空约束/默认值约束/检查约束) 范式理论 12345678910111213141516表的设计原则: 范式理论(1NF / 2NF / 3NF / BCNF)范式级别指的是表设计的规范程度, 范式级别越高规范程度也就越高范式级别越高在插入/删除/更新数据时可能发生的问题就越少而且表中的数据冗余(重复)也就越低实际开发中旺旺会降低范式级别来提升查询数据的性能1NF - 列的属性值不能够再拆分2NF - 除了主键列之外的列完全依赖于主键 场景: 不同学院的学生可能有相同的学号 学生表(stuid, sname, ssex, depid, dname, dtel) 主键(stuid, depid) sname和ssex依赖于stuid, 而dname和dtel依赖于depid 这种依赖是部分依赖而不是完全依赖所以不满足2NF3NF - 消除传递依赖 场景: 整个学校学生的学号是唯一的 学生表(stuid, sname, ssex, depid, dname, dtel) 主键(stuid)]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系统操作]]></title>
    <url>%2F2018%2F05%2F26%2Flinux%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[此篇文章总结了一些linux系统上的基本指令和操作 基本指令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768who - 当前用户名ps - process status 显示进程 -ef 显示所有进程全格式 ps -aux | grep nginx 查看nginx进程状态 kill -9/l 进程代码数字netstat -nap 查看网络占用进程adduser Ashley - 添加普通用户passwd Ashley - 设置密码userdel - 删除用户hostname - 显示和设置系统的主机名logout - 退出服务器reboot - 重启python --version - 查看当前版本查看帮助 man info --helppwd - print working directory 当前所在文件夹ls - list directory contents ls -l (long) ls -a (all) ls + 路径 - 路径下的所有目录 ls -la &gt; hello.txt - 递归出的目录全部放在hello.txt文件里mkdir - make directoryrmdir - remove directorytouch - 新建文件cd - change directory 打开文件夹 cd .. cd ../..cat - concatenate head/tail -num(显示行数) head -5 index.html less/more(一页一页的显示) cat index.html | lessrm - remove rm -r (recursive递归) rm -i (interactive) rm -f (force) rm -f *cp - copy cp -r source_dir dest_dir - 复制目录history !nummv - movewget + 链接 wget -O +文件名 +链接ctrl + c - 终止命令grep - 搜索指定内容 cat 文件名 | grep &apos;&lt;div .*&gt;&apos; grep &apos;&lt;div .*&gt;&apos; grep &apos;&lt;div .*&gt;&apos; .-R -n &amp; (R递归文件夹 n打印行号)top - cpu占用率jobs - 查看后台运行的程序 fg %1 bg %1wc - word count 行数和字数 wc -l +文件名 - 行数 wc -w +文件名 - 字数uniq - 相邻单词去重sort - 文件内容排序diff + 文件名 + 文件名 - 查找文件的不同file - 查看文件的类型cal - 当月日历echo - 回声 echo &apos;文字&apos; &gt; poem.txt (将文字写入poem文件) echo $((a + b)) echo $PATH (环境变量)HISTSIZE - 设置历史记录 连接SSH12345ssh Ashley@120.79.134.234 w - 查看连接的设备 wall - 给所有人发消息scp poem.txt Ashley@120.79.134.234:/home/hellokitty/ - 将poem文件安全拷贝到Ashley上sudo - super user do ###文件操作 123456789101112131415161718ln -l - link创建硬链接(相当于给文件做备份)ln -s - 创建软连接(相当于给文件建快捷方式) ln -s /usr/local/python3.6/bin/2to3 /usr/bin/2to3解压缩: gunzip + 文件名 xz -d + 文件名压缩: gzip + 文件名 xz -z -6 + 文件名解归档: tar -xvf + 文件名 xv - extract verbose抽取过程归档: tar -cvf all.tar *alias 创建别名 alias fuck=&apos;tar -cvf all.tar *&apos;unalias 反别名df - 磁盘的使用情况 ###文件权限 12345678所有者 同组用户 其他用户rw- r-- r--rwx r-x r-xread write executechmod - change mode 改变模式 chmod u+x + 文件名 chmod o+x,g+x +文件名 chmod 777 + 文件名 安装卸载12345678910111213141516171819202122yum intall gcc - yellowdog updater modified 包管理工具yum list installed | grep nginx 查看是否安装过nginxyum list nginx yum update nginx 更新文件rpm 红帽子的包管理工具 -i 安装 -e 移除 -vh 安装过程的信息 -qa | grep jdk 查询是否安装过jdk文件 rpm -qa | grep jdk | xargs rpm -e 移除jdk文件tar gz /tar - src - make &amp;&amp; make install - bin mysql 默认3306端口systemctl start firewalld stop firewalldsystemctl firewalld start - centos之前 statussystemctl enable mariadb 开机自启 disabled mariadb 禁用开机自启 vim指令1234567891011121314151617181920212223esc 5yy p - 复制粘贴5行esc u - undo撤销esc 5dd - 删除5行esc dw - 删一个单词esc d$ -删到行尾esc G - 去到最后一行esc 30G - 去到第30行esc gg - 去到第一行esc ctrl+fesc ctrl+besc ctrl+y - 向上翻页esc ctrl+e - 向下翻页esc $ - 去到行尾esc ^ - 去到行首:inoremap pymain if __name__ == &apos;__main__&apos; - 映射快捷键:syntax off - 关掉高量语法:set nu - 显示行数:set ts=4 - 设置制表键4个空格:wq/ZZ - 保存退出:q! - 强行退出vim .vimrc - 创建vim的配置文件!v - 将刚才以v开头的文件重新执行一遍]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
