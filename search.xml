<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>简单的装饰器代码</title>
      <link href="/2018/08/20/%E5%86%99%E7%82%B9%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2018/08/20/%E5%86%99%E7%82%B9%E7%AE%80%E5%8D%95%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a><p>一个计算函数运行时间的装饰器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cal_func</span><span class="params">(*args, **kargs)</span>:</span></span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        result = func(*args, **kargs)</span><br><span class="line">        end = datetime.datetime.now()</span><br><span class="line">        print(<span class="string">'cost_time:'</span>, (end - start).microseconds)</span><br><span class="line">    <span class="keyword">return</span> cal_func</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">add</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure><p>在访问网页时判断用户是否登陆:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.core.urlresolvers <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user.models <span class="keyword">import</span> Users</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_login</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="comment"># 如果登陆,返回函数func</span></span><br><span class="line">        ticket = request.COOKIES.get(<span class="string">'ticket'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ticket:</span><br><span class="line">            <span class="comment"># 没有登陆,跳转到登陆页面</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'user:login'</span>))</span><br><span class="line">        user = Users.objects.filter(ticket=ticket)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'user:login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(request)</span><br><span class="line">    <span class="keyword">return</span> check_login</span><br></pre></td></tr></table></figure><p>这里是使用的ticket来模拟session id,没有使用Django自带的request.session,通过判断请求中的seesion id是否存在以及与session是否一致来判断用户是否登陆,可以放在需要登陆才能访问的视图函数之前.</p><p>在Django中实现判断用户是否登陆还可以中间件来实现,方法多样.</p>]]></content>
      
      <categories>
          
          <category> 装饰器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django与Flask的区别</title>
      <link href="/2018/08/20/Flask%E4%B8%8EDjango%E5%AF%B9%E6%AF%94/"/>
      <url>/2018/08/20/Flask%E4%B8%8EDjango%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p>此篇文章总结了Django与Flask的区别</p><a id="more"></a><h3 id="Django"><a href="#Django" class="headerlink" title="Django:"></a>Django:</h3><p>我个人更喜欢使用Django,因为我能想到的,它基本都帮我完成了,它会告诉我需要在哪个文件中写什么,也会明确的告诉我在哪里出现了错误.</p><ol><li>Django体系庞大,自带功能完善的ORM和模板引擎,在灵活上和自由度上不够高,把我们的行动范围限制在了它准备好的框架中</li><li>使用Django开发小应用有一种使用Scapy去爬取小网站的感觉,大材小用.</li><li>Django与SQL耦合度过高,与NoSQL的搭配并不好.</li><li>Django适合企业级的网站开发:快速,安全,稳定</li><li>Django比Flask更成熟,完善,但是生态相对封闭</li><li>Django的官网比Flask好看太多.</li></ol><p>这些只是Django优点的一部分,百度上还有很多.</p><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>第一次使用Flask时,我真的不知所措,我不知道在哪里需要干什么,文件到底放在哪里,代码应该放在哪个py文件中,我觉得大牛应该更喜欢Flask,因为它提供了一个自由发挥的场地,大牛们可以随意发挥不受拘束.</p><ol><li>Flask没有Django那么重,更为自由,灵活</li><li>很适合小型应用,开发大型应用时,需要开发者有较强的能力和经验</li><li>在性能方面都会比Django要好</li><li>与关系型数据库的匹配不弱于Django,但在NoSQL方面的匹配要强于Django</li></ol>]]></content>
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL的主从配置</title>
      <link href="/2018/08/20/MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/20/MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>MySQL的主从配置比redis的主从相比要轻松的多,可能我参与的比较少吧,但是基本的主从配置还是没有问题的.</p><a id="more"></a><h3 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h3><p>主从主要实现的是读写分离,这样做法的优势有很多,我所理解的一个是缓解服务器的读写压力.</p><p>在Ubuntu下,配置文件为my.cnf,位置为/etc/mysql/my.cnf</p><p>在windows下,配置文件为my.ini</p><p>vim my.cnf # 进入配置文件进行设定</p><p>server-id=200 # 设置主服务器的ID,主和从的id号不能相同</p><p>innodb_flush_log_at_trx_commit=2 # 防止断电数据丢失</p><p>sync_binlog=1 # 开启binlog日志同步功能</p><p>log-bin=mysql-bin-200 # binlog日志文件名</p><p>binlog-do-db=xxx # 这个表示同步哪个库,不写的话表示同步所有的库</p><h3 id="主配置完成后-重启主库"><a href="#主配置完成后-重启主库" class="headerlink" title="主配置完成后,重启主库"></a>主配置完成后,重启主库</h3><p>service mysql restart</p><p>mysql -uroot -p # 登陆</p><p>grant replication slave on . to ‘‘mark‘@’192.168.1.201’ identified by ‘123456’; # 授权给从数据库服务器192.168.1.201, 用户名mark, 密码123456</p><p>show master status; # 查看主库的状态</p><p><img src=".\master_slave.png" alt=""></p><h3 id="从配置"><a href="#从配置" class="headerlink" title="从配置"></a>从配置</h3><p>vim my.cnf</p><p>server-id = 201 # 不能和主ID一样</p><p>innodb_fiush_log_at_trx_commit=2</p><p>sync_binlog=1</p><p>log-bin=mysql-bin-201</p><h3 id="从配置完成后-重启重库"><a href="#从配置完成后-重启重库" class="headerlink" title="从配置完成后,重启重库"></a>从配置完成后,重启重库</h3><p>service mysql restart</p><p>mysql -uroot -p</p><p>change master to master_host=’192.168.1.200’, master_user=’mark’,master_password=’123456’,master_log_file = ‘mysql-bin-200.000002’,master_log_pos=1167; # 这里是建立与主服务器的连接,master_log_pos需要查看主数据库中position的数值</p><p>start slave; # 开启从库</p><p>show slave status; # 查看从数据库状态</p><h3 id="验证主从"><a href="#验证主从" class="headerlink" title="验证主从"></a>验证主从</h3><p>主从中的数据库需要相同,主数据库在进行改动时,从数据库是可以查看的,主数据库负责写,从数据库负责读,分摊数据库压力.</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对内置装饰器的理解</title>
      <link href="/2018/08/20/%E5%AF%B9%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/08/20/%E5%AF%B9%E5%86%85%E7%BD%AE%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>装饰器就是用函数来包装函数,对内函数赋予一些我们所需要的功能,Python有三个内置的装饰器:staticmethod,classmethod和property,这三个装饰器都是和类相关的.</p><a id="more"></a><h3 id="staticmethond"><a href="#staticmethond" class="headerlink" title="@staticmethond"></a>@staticmethond</h3><p>一般情况,要使用类的方法,需要先实例化一个对象再调用方法,使用staticmethod(静态方法)之后,可以直接使用类来进行方法的访问,不需要事先进行实例化,这样做的好处就是可以将属于这个类的函数放到静态方法中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">class_arr = <span class="number">1</span></span><br><span class="line"><span class="comment"># 对象方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">A</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">foo = test()</span><br><span class="line">foo.A()</span><br><span class="line">foo.B()</span><br><span class="line">test.B()</span><br><span class="line">test.A()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">B</span><br><span class="line">B</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\Users\29427\Desktop\reivew.py"</span>, line <span class="number">36</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    test.A()</span><br><span class="line">TypeError: A() missing <span class="number">1</span> required positional argument: <span class="string">'self'</span></span><br></pre></td></tr></table></figure><p>可以看出,使用静态方法装饰的方法,类可以直接访问,而没有被装饰的方法,类是无法访问的,并且装饰的方法是不用传入self的</p><h3 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h3><p>类方法和静态方法很相似,区别在于静态方法装饰的方法是不需要传入self的,而类方法装饰的方法是需要传入一个隐式的对象作为参数,这个隐式的对象在有继承时表示相应的子类,在无继承时表示当前类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">staticSayHello</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Parent static"</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classSayHello</span><span class="params">(cls)</span>:</span>  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls == Boy:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"Boy classSayHello"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> cls == Girl:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">"girl sayHello"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span><span class="params">(Parent)</span>:</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span><span class="params">(Parent)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Boy.classSayHello()</span><br><span class="line">Girl.classSayHello()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Boy classSayHello</span><br><span class="line">girl sayHello</span><br></pre></td></tr></table></figure><p>可以看出这个隐式的类参数可以进行类的区分</p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>该装饰器可以将方法变成属性,在进行访问时就不能像访问方法那样进行访问,要用访问属性的方式进行访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'分数必须是整数才行呐'</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'分数必须0-100之间'</span>)</span><br><span class="line">        self._score = value</span><br><span class="line">s = Student()</span><br><span class="line">s.score = <span class="number">60</span> </span><br><span class="line">s.set_score(<span class="number">60</span>)</span><br><span class="line">s.score </span><br><span class="line">s.get_score()</span><br></pre></td></tr></table></figure><p>使用property来装饰score时会自动创建一个新的setter装饰器,使用setter可以对属性进行赋值,这样做的话,对一个属性的查询和修改就会简单很多.</p>]]></content>
      
      <categories>
          
          <category> 装饰器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器 </tag>
            
            <tag> staticmethod </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL性能优化</title>
      <link href="/2018/08/20/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/08/20/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>此篇文章总结了MySQL的参数优化</p><a id="more"></a><h3 id="修改back-log"><a href="#修改back-log" class="headerlink" title="修改back_log"></a>修改back_log</h3><p>back_log值表示MySQL的连接数据达到max_connections时,有多少请求能够被放在堆栈之中以等待其他连接释放.如果等待连接的数量超过back_log时,就不被授予连接资源.</p><p>show variables like ‘back_log’:查看当前数量</p><p>网上说默认值是50, 但是我查出来是80,反正如果要根据当前需求来改变数量,可以在my.ini中将back_log的值修改为500,理论上可以无限增大的,但是会收到系统网卡等的限制.</p><h3 id="修改wait-timeout"><a href="#修改wait-timeout" class="headerlink" title="修改wait_timeout"></a>修改wait_timeout</h3><p>wait_timeout值表示服务器关闭非交互连接之前等待活动的秒数,而interactive_timeout表示的交互式连接等待的秒数,当网站有大量的MySQL连接请求时,设置这个wait_timeout值就非常重要,可以将超时的连接关闭,避免资源的损失.</p><p>将wait_timeout从8小时修改为30分钟,wait_timeout=1800</p><h3 id="修改max-connections"><a href="#修改max-connections" class="headerlink" title="修改max_connections"></a>修改max_connections</h3><p>max_connections指MySQL的最大连接数,在并发连接较大时可以适当增大这个连接数,但是增大连接就意味着更多的内存开销,只能在适当的范围内调节.</p><p>MySQL服务器允许的最大连接数16384</p><p>show variables like ‘max_connections’查看当前连接数</p><p>可以将默认的max_connections值151,修改为3000</p><h3 id="修改max-user-connections"><a href="#修改max-user-connections" class="headerlink" title="修改max_user_connections"></a>修改max_user_connections</h3><p>max_user_connections指同一个账号能够同时连接MySQL服务的最大连接数.</p><p>默认值为0表示不受限制,根据实际需求进行调节.</p><p>要与Max_used_connections的区分开来,后者是表示过去的某段时间最大的连接数.</p><p>show variables like ‘max_user_connections’查看当前值</p><h3 id="修改thread-concurrency"><a href="#修改thread-concurrency" class="headerlink" title="修改thread_concurrency"></a>修改thread_concurrency</h3><p>thread_concurrency指表示开启的线程数,一般根据服务器的CPU核数进行设定,线程数等于CPU x 2</p><p>show variables like ‘thread_concurrency’查看默认值</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库概念</title>
      <link href="/2018/08/15/mysql/"/>
      <url>/2018/08/15/mysql/</url>
      <content type="html"><![CDATA[<p>此篇文章简单介绍数据库概念</p><a id="more"></a><h2 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h2><ol><li>为什么要使用数据库?</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据持久化 - 将数据从一掉电数据就丢失的存储介质(内存)转移到持久存储介质(硬盘)</span><br><span class="line">普通文件 / 二进制文件 / Excel / 数据库</span><br><span class="line">数据库 - 高效的存储和管理数据方便的检索数据</span><br></pre></td></tr></table></figure><ol start="2"><li>什么事关系型数据库?</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">理论基础 - 集合论和关系代数</span><br><span class="line">用二维表组织数据</span><br><span class="line">表 - 实体</span><br><span class="line">行 - 记录</span><br><span class="line">列 - 字段</span><br><span class="line">表与表之间有关系</span><br><span class="line">编程语言 - SQL - 结构化查询语言</span><br></pre></td></tr></table></figure><ol start="3"><li>数据库、数据库系统、数据库管理系统？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Database - DB - 数据的仓库(集散地)</span><br><span class="line">DBS - 包括了DB、DBMS、DBA（数据库管理员）</span><br><span class="line">（R）DBMS - （关系型）数据库管理系统 - 管理数据库的软件</span><br><span class="line">- MySQL - 小巧但是强大</span><br><span class="line">- Oracle - 安全强大 商业智能 昂贵</span><br><span class="line">- SQL Server</span><br><span class="line">- SQLite - 嵌入式数据库（移动端）</span><br><span class="line">yum install mariadb-server mariadb</span><br><span class="line">rpm -ivh mysql-server.rpm</span><br><span class="line">rpm -ivh mysql-client.rpm</span><br><span class="line"></span><br><span class="line">services.msc --&gt; MySQL</span><br><span class="line">net start mysql</span><br><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><ol start="4"><li>什么是SQL?</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Structured Query Language</span><br><span class="line">结构化查询语言</span><br><span class="line">DDL(数据定义语言): creat / drop / alter</span><br><span class="line">DML(数据操纵语言): insert / delete / update</span><br><span class="line">DQL(数据查询语言): select</span><br><span class="line">DCL(数据控制语言): grant / revoke / begin / commit / rollback</span><br></pre></td></tr></table></figure><ol start="5"><li>关系型数据库中数据完整性指的是什么?</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 实体完整性: 每条记录都是独一无二的</span><br><span class="line">2. 参照完整性: 表中的数据要参照其他表已有的数据(外键)</span><br><span class="line">3. 域完整性: 数据是有效的(数据类型/非空约束/默认值约束/检查约束)</span><br></pre></td></tr></table></figure><p>范式理论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">表的设计原则: 范式理论(1NF / 2NF / 3NF / BCNF)</span><br><span class="line">范式级别指的是表设计的规范程度, 范式级别越高规范程度也就越高</span><br><span class="line">范式级别越高在插入/删除/更新数据时可能发生的问题就越少</span><br><span class="line">而且表中的数据冗余(重复)也就越低</span><br><span class="line">实际开发中旺旺会降低范式级别来提升查询数据的性能</span><br><span class="line">1NF - 列的属性值不能够再拆分</span><br><span class="line">2NF - 除了主键列之外的列完全依赖于主键</span><br><span class="line">场景: 不同学院的学生可能有相同的学号</span><br><span class="line">    学生表(stuid, sname, ssex, depid, dname, dtel)</span><br><span class="line">    主键(stuid, depid)</span><br><span class="line">    sname和ssex依赖于stuid, 而dname和dtel依赖于depid</span><br><span class="line">    这种依赖是部分依赖而不是完全依赖所以不满足2NF</span><br><span class="line">3NF - 消除传递依赖</span><br><span class="line">场景: 整个学校学生的学号是唯一的</span><br><span class="line">学生表(stuid, sname, ssex, depid, dname, dtel)</span><br><span class="line">主键(stuid)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux系统操作</title>
      <link href="/2018/05/26/linux%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/05/26/linux%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>此篇文章总结了一些linux系统上的基本指令和操作</p><a id="more"></a><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">who - 当前用户名</span><br><span class="line">ps - process status 显示进程</span><br><span class="line">-ef 显示所有进程全格式</span><br><span class="line">ps -aux | grep nginx 查看nginx进程状态</span><br><span class="line">kill -9/l 进程代码数字</span><br><span class="line">netstat -nap 查看网络占用进程</span><br><span class="line">adduser Ashley - 添加普通用户</span><br><span class="line">passwd Ashley - 设置密码</span><br><span class="line">userdel - 删除用户</span><br><span class="line">hostname - 显示和设置系统的主机名</span><br><span class="line">logout - 退出服务器</span><br><span class="line">reboot - 重启</span><br><span class="line">python  --version - 查看当前版本</span><br><span class="line">查看帮助</span><br><span class="line">    man</span><br><span class="line">    info</span><br><span class="line">    --help</span><br><span class="line">pwd - print working directory 当前所在文件夹</span><br><span class="line">ls - list directory contents</span><br><span class="line">ls -l (long)</span><br><span class="line">ls -a (all)</span><br><span class="line">ls + 路径 - 路径下的所有目录</span><br><span class="line">ls -la &gt; hello.txt - 递归出的目录全部放在hello.txt文件里</span><br><span class="line">mkdir - make directory</span><br><span class="line">rmdir - remove directory</span><br><span class="line">touch - 新建文件</span><br><span class="line">cd - change directory 打开文件夹</span><br><span class="line">cd ..</span><br><span class="line">cd ../..</span><br><span class="line">cat - concatenate</span><br><span class="line">head/tail -num(显示行数)</span><br><span class="line">head -5 index.html</span><br><span class="line">less/more(一页一页的显示)</span><br><span class="line">cat index.html | less</span><br><span class="line">rm - remove</span><br><span class="line">rm -r (recursive递归)</span><br><span class="line">rm -i (interactive)</span><br><span class="line">rm -f (force)</span><br><span class="line">rm -f *</span><br><span class="line">cp - copy</span><br><span class="line">cp -r source_dir dest_dir - 复制目录</span><br><span class="line">history</span><br><span class="line">!num</span><br><span class="line">mv - move</span><br><span class="line">wget + 链接</span><br><span class="line">wget -O +文件名 +链接</span><br><span class="line">ctrl + c - 终止命令</span><br><span class="line">grep - 搜索指定内容</span><br><span class="line">cat 文件名 | grep &apos;&lt;div .*&gt;&apos;</span><br><span class="line">grep &apos;&lt;div .*&gt;&apos;</span><br><span class="line">grep &apos;&lt;div .*&gt;&apos; .-R -n &amp; (R递归文件夹 n打印行号)</span><br><span class="line">top - cpu占用率</span><br><span class="line">jobs - 查看后台运行的程序</span><br><span class="line"> fg %1</span><br><span class="line"> bg %1</span><br><span class="line">wc - word count 行数和字数</span><br><span class="line">wc -l +文件名 - 行数</span><br><span class="line">wc -w +文件名 - 字数</span><br><span class="line">uniq - 相邻单词去重</span><br><span class="line">sort - 文件内容排序</span><br><span class="line">diff + 文件名 + 文件名 - 查找文件的不同</span><br><span class="line">file - 查看文件的类型</span><br><span class="line">cal - 当月日历</span><br><span class="line">echo - 回声</span><br><span class="line">echo &apos;文字&apos; &gt; poem.txt (将文字写入poem文件)</span><br><span class="line">echo $((a + b))</span><br><span class="line">echo $PATH (环境变量)</span><br><span class="line">HISTSIZE - 设置历史记录</span><br></pre></td></tr></table></figure><h3 id="连接SSH"><a href="#连接SSH" class="headerlink" title="连接SSH"></a>连接SSH</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh Ashley@120.79.134.234</span><br><span class="line">    w - 查看连接的设备</span><br><span class="line">    wall - 给所有人发消息</span><br><span class="line">scp poem.txt Ashley@120.79.134.234:/home/hellokitty/ - 将poem文件安全拷贝到Ashley上</span><br><span class="line">sudo - super user do</span><br></pre></td></tr></table></figure><p>###文件操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ln -l - link创建硬链接(相当于给文件做备份)</span><br><span class="line">ln -s - 创建软连接(相当于给文件建快捷方式)</span><br><span class="line">ln -s /usr/local/python3.6/bin/2to3 /usr/bin/2to3</span><br><span class="line">解压缩:</span><br><span class="line">gunzip + 文件名</span><br><span class="line">xz -d + 文件名</span><br><span class="line">压缩:</span><br><span class="line">gzip + 文件名</span><br><span class="line">xz -z -6 + 文件名</span><br><span class="line">解归档:</span><br><span class="line">tar -xvf + 文件名 </span><br><span class="line"> xv - extract verbose抽取过程</span><br><span class="line">归档:</span><br><span class="line">tar -cvf all.tar *</span><br><span class="line">alias 创建别名</span><br><span class="line">alias fuck=&apos;tar -cvf all.tar *&apos;</span><br><span class="line">unalias 反别名</span><br><span class="line">df - 磁盘的使用情况</span><br></pre></td></tr></table></figure><p>###文件权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">所有者 同组用户 其他用户</span><br><span class="line">rw-    r--     r--</span><br><span class="line">rwx    r-x     r-x</span><br><span class="line">read write execute</span><br><span class="line">chmod - change mode 改变模式</span><br><span class="line">chmod u+x + 文件名</span><br><span class="line">chmod o+x,g+x +文件名</span><br><span class="line">chmod 777 + 文件名</span><br></pre></td></tr></table></figure><h3 id="安装卸载"><a href="#安装卸载" class="headerlink" title="安装卸载"></a>安装卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">yum intall gcc - yellowdog updater modified 包管理工具</span><br><span class="line">yum list installed | grep nginx 查看是否安装过nginx</span><br><span class="line">yum list nginx </span><br><span class="line">yum update nginx 更新文件</span><br><span class="line">rpm 红帽子的包管理工具</span><br><span class="line">-i 安装</span><br><span class="line">-e 移除</span><br><span class="line">-vh 安装过程的信息</span><br><span class="line">-qa | grep jdk 查询是否安装过jdk文件</span><br><span class="line">rpm -qa | grep jdk | xargs rpm -e 移除jdk文件</span><br><span class="line">tar gz /tar</span><br><span class="line">- src - make &amp;&amp; make install</span><br><span class="line">- bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql 默认3306端口</span><br><span class="line">systemctl start firewalld</span><br><span class="line">  stop firewalld</span><br><span class="line">systemctl firewalld start - centos之前</span><br><span class="line">status</span><br><span class="line">systemctl enable mariadb 开机自启</span><br><span class="line">  disabled mariadb 禁用开机自启</span><br></pre></td></tr></table></figure><h2 id="vim指令"><a href="#vim指令" class="headerlink" title="vim指令"></a>vim指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">esc 5yy p - 复制粘贴5行</span><br><span class="line">esc u - undo撤销</span><br><span class="line">esc 5dd - 删除5行</span><br><span class="line">esc dw - 删一个单词</span><br><span class="line">esc d$ -删到行尾</span><br><span class="line">esc G - 去到最后一行</span><br><span class="line">esc 30G - 去到第30行</span><br><span class="line">esc gg - 去到第一行</span><br><span class="line">esc ctrl+f</span><br><span class="line">esc ctrl+b</span><br><span class="line">esc ctrl+y - 向上翻页</span><br><span class="line">esc ctrl+e - 向下翻页</span><br><span class="line">esc $ - 去到行尾</span><br><span class="line">esc ^ - 去到行首</span><br><span class="line">:inoremap pymain if __name__ == &apos;__main__&apos; - 映射快捷键</span><br><span class="line">:syntax off - 关掉高量语法</span><br><span class="line">:set nu - 显示行数</span><br><span class="line">:set ts=4 - 设置制表键4个空格</span><br><span class="line">:wq/ZZ - 保存退出</span><br><span class="line">:q! - 强行退出</span><br><span class="line"></span><br><span class="line">vim .vimrc - 创建vim的配置文件</span><br><span class="line">!v - 将刚才以v开头的文件重新执行一遍</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
